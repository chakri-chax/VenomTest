pragma ever-solidity >= 0.62.0;

pragma AbiHeader expire;
pragma AbiHeader time;
pragma AbiHeader pubkey;

import "./interfaces/INft.tsol";
import "./interfaces/ICollection.tsol";
import "@broxus/tip4/contracts/TIP4_1/TIP4_1Nft.tsol";
import "@broxus/tip4/contracts/TIP4_2_2/TIP4_2_2Nft.tsol";
import "@broxus/tip4/contracts/TIP4_3/TIP4_3Nft.tsol";

contract Nft is TIP4_1Nft, TIP4_2_2Nft, TIP4_3Nft, INft {

    uint8 constant sender_is_not_manager_or_collection = 240;
    uint8 constant sender_is_not_correct_collection = 241;
    uint8 constant name_is_out_of_range = 242;
    uint8 constant invalid_address = 243;

    uint256 public nftId; 
    uint256 public parentNftId;    
    address public parentNftAddress;    

    string public typeName;
    string public nickName;
    

    event NftTypeNameChanged(uint256 nftId, string oldTypeName, string newTypeName);
    event NftNickNameChanged(uint256 nftId, string oldNickName, string newNickName);

    constructor(
        address owner,
        address sendGasTo,
        uint128 remainOnNft,
        uint256 nftId_,
        uint256 parentNftId_,
        address parentNftAddress_,
        string typeName_,
        string nickName_,
        uint128 indexDeployValue,
        uint128 indexDestroyValue,
        TvmCell codeIndex       
    ) TIP4_1Nft(
        owner,
        sendGasTo,
        remainOnNft
    ) TIP4_3Nft (
        indexDeployValue,
        indexDestroyValue,
        codeIndex
    ) public {
        tvm.accept();
        nftId = nftId_;
        parentNftId = parentNftId_;
        parentNftAddress = parentNftAddress_;
        typeName = typeName_;
        nickName = nickName_;
    }
   
    modifier onlyManagerOrCollection virtual {
        require(msg.sender == _manager || msg.sender == _collection, sender_is_not_manager_or_collection);
        _;
    }

    modifier onlyCollection virtual {
        require(msg.sender == _collection, sender_is_not_correct_collection);
        _;
    }

    function _beforeTransfer(
        address /*to*/,
        address sendGasTo, 
        mapping(address => CallbackParams) /*callbacks*/
    ) internal virtual override(TIP4_1Nft, TIP4_3Nft) {
        TIP4_3Nft._destructIndex(sendGasTo);
    }

    function _afterTransfer(
        address /*to*/,
        address /*sendGasTo*/,
        mapping(address => CallbackParams) /*callbacks*/
    ) internal virtual override(TIP4_1Nft, TIP4_3Nft) {
        TIP4_3Nft._deployIndex();
    }

    function _beforeChangeOwner(
        address /*oldOwner*/,
        address /*newOwner*/,
        address sendGasTo, 
        mapping(address => CallbackParams) /*callbacks*/
    ) internal virtual override(TIP4_1Nft, TIP4_3Nft) {
        TIP4_3Nft._destructIndex(sendGasTo);
    }   

    function _afterChangeOwner(
        address /*oldOwner*/,
        address /*newOwner*/,
        address /*sendGasTo*/,
        mapping(address => CallbackParams) /*callbacks*/
    ) internal virtual override(TIP4_1Nft, TIP4_3Nft) {
        TIP4_3Nft._deployIndex();
    }

    function _beforeChangeManager(
        address oldManager,
        address newManager,
        address sendGasTo,
        mapping(address => CallbackParams) callbacks
    ) internal virtual override {
        oldManager; newManager; sendGasTo; callbacks;
    }

    function _afterChangeManager(
        address oldManager,
        address newManager,
        address sendGasTo,
        mapping(address => CallbackParams) callbacks
    ) internal virtual override {
        oldManager; newManager; sendGasTo; callbacks;
    }

    function setTypeName(string typeName_) external override onlyCollection { 
        require(bytes(typeName_).length <= 100, 242);  
        require(_collection != address(0), 243);
        string oldTypeName = typeName;
        typeName = typeName_;
        ICollection(_collection).acceptNftTypeNameChange{
            value: 0,
            flag: 64, 
            bounce: true
        }(nftId, typeName, oldTypeName);    
        emit NftTypeNameChanged(nftId, oldTypeName, typeName);
    }

    function setNickName(string nickName_) external override onlyManagerOrCollection { 
        require(bytes(nickName_).length <= 100, 242) ; 
        require(_collection != address(0), 243);
        string oldNickName = nickName;
        nickName = nickName_;        
        ICollection(_collection).acceptNftNickNameChange{
            value: 0,
            flag: 64, 
            bounce: true
        }(nftId, nickName, oldNickName, msg.sender);
        emit NftNickNameChanged(nftId, oldNickName, nickName);
    }

    function getNftInfo() external view responsible override returns(uint256 nftId_, uint256 parentNftId_, address parentNftAddress_, string typeName_, string nickName_) {
		return {value: 0, bounce: false, flag: 64}(nftId, parentNftId, parentNftAddress, typeName, nickName);    
    }

}